name: Tauri build

on:
  push:
    tags:
      - "v*"
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - created
  workflow_dispatch:

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            binname: "eim-macos-aarm64"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-13" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
            binname: "eim-macos-x86_64"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
            binname: "eim-linux-x86_64"
          - platform: "windows-latest"
            args: ""
            binname: "eim-windows-x86_64"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          vcpkg install openssl:x64-windows-static-md

      - name: Install OpenSSL (Macos)
        if: matrix.os == 'macos-latest'
        run: brew install openssl

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev libssl-dev patchelf

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.

      - uses: apple-actions/import-codesign-certs@v3
        if: startsWith(matrix.platform, 'macos')
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          keychain: build

      - name: build with signing and notarization (macos only)
        if: startsWith(matrix.platform, 'macos')
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          APPLE_ID: ${{ secrets.NOTARIZATION_USERNAME }}
          APPLE_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.NOTARIZATION_TEAM_ID }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          /usr/bin/security create-keychain -p espressif notary.keychain
          /usr/bin/security default-keychain -s notary.keychain
          /usr/bin/security unlock-keychain -p espressif notary.keychain

          yarn tauri build

      - name: build app
        if: ${{ ! startsWith(matrix.platform, 'macos') }}
        run: |
          yarn tauri build

      - name: Add +x permission to the binary
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          chmod +x src-tauri/target/release/eim
          chmod +x src-tauri/target/release/bundle/appimage/*.AppImage

      - name: Upload app Linux binary
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'ubuntu-22.04'
        with:
          name: ${{ matrix.binname }}-${{ github.run_number }}
          path: |
            src-tauri/target/release/eim
          if-no-files-found: error

      - name: Upload Release Asset Linux
        if: github.event_name == 'release' && github.event.action == 'created' && matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: src-tauri/target/release/eim
          asset_name: ${{ matrix.binname }}
          asset_content_type: application/octet-stream

      - name: Upload app .deb
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'ubuntu-22.04'
        with:
          name: ${{ matrix.binname }}-deb
          path: |
            src-tauri/target/release/bundle/deb/*.deb
          if-no-files-found: error

      - name: Upload app .rpm
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'ubuntu-22.04'
        with:
          name: ${{ matrix.binname }}-rpm
          path: |
            src-tauri/target/release/bundle/rpm/*.rpm
          if-no-files-found: error

      - name: Upload app .AppImage
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'ubuntu-22.04'
        with:
          name: ${{ matrix.binname }}-AppImage
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
          if-no-files-found: error

      - name: Add +x permission to the binary
        if: startsWith(matrix.platform, 'macos')
        run: |
          chmod +x ./src-tauri/target/release/bundle/macos/eim.app

      - name: Zip eim executable for notarization
        if: startsWith(matrix.platform, 'macos')
        run: |
          chmod +x ./src-tauri/target/release/bundle/macos/eim.app
          cd ./src-tauri/target/release/bundle/macos/
          zip -r eim.zip eim.app

      - name: Upload app MacOs binary
        uses: actions/upload-artifact@v4
        if: startsWith(matrix.platform, 'macos')
        with:
          name: ${{ matrix.binname }}-${{ github.run_number	}}
          path: |
            src-tauri/target/release/bundle/macos/eim.zip
          if-no-files-found: error

      - name: Upload Release Asset
        if: github.event_name == 'release' && github.event.action == 'created' && ( startsWith(matrix.platform, 'macos') )
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: src-tauri/target/release/bundle/macos/eim.zip
          asset_name: ${{ matrix.binname }}.zip
          asset_content_type: application/zip

      - name: Upload app MacOs
        uses: actions/upload-artifact@v4
        if: startsWith(matrix.platform, 'macos')
        with:
          name: ${{ matrix.binname }}-dmg
          path: |
            src-tauri/target/release/bundle/dmg/*.dmg
          if-no-files-found: error

      - name: Upload app MacOs
        uses: actions/upload-artifact@v4
        if: startsWith(matrix.platform, 'macos')
        with:
          name: ${{ matrix.binname }}-app
          path: |
            src-tauri/target/release/bundle/macos/*.app
          if-no-files-found: error

      - name: Sign Windows Binary
        if: matrix.platform == 'windows-latest'
        env:
          WINDOWS_PFX_FILE: ${{ secrets.WIN_CERTIFICATE }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.WIN_CERTIFICATE_PWD }}
          WINDOWS_SIGN_TOOL_PATH: 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool.exe'
        run: |
          echo $env:WINDOWS_PFX_FILE | Out-File -FilePath cert.b64 -Encoding ASCII
          certutil -decode cert.b64 cert.pfx
          Remove-Item cert.b64
          & "$env:WINDOWS_SIGN_TOOL_PATH" sign /f cert.pfx /p $env:WINDOWS_PFX_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 .\src-tauri\target\release\eim.exe

      - name: Upload app Windows binary
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'windows-latest'
        with:
          name: ${{ matrix.binname }}-${{ github.run_number	}}
          path: |
            src-tauri/target/release/eim.exe
          if-no-files-found: error

      - name: Upload Release Asset
        if: github.event_name == 'release' && github.event.action == 'created' && matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: src-tauri/target/release/eim.exe
          asset_name: ${{ matrix.binname }}.exe
          asset_content_type: application/octet-stream

      - name: Upload app Windows
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'windows-latest'
        with:
          name: eim-windows-msi
          path: |
            src-tauri/target/release/bundle/msi/*.msi
          if-no-files-found: error

  fetch-latest-release:
    name: Fetch Latest Release Info
    needs: [publish-tauri]
    runs-on: ubuntu-latest
    # This ensures the job runs after a release is created or when manually triggered
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Fetch latest release
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-east-1
        run: |
          curl -s https://api.github.com/repos/espressif/idf-im-ui/releases/latest > eim_gui_release.json
          echo "Latest release tag: $(jq -r .tag_name eim_gui_release.json)"
          aws s3 cp --acl=public-read "eim_gui_release.json" s3://espdldata/dl/eim/eim_gui_release.json

  call-test-workflow:
    needs: publish-tauri
    uses: ./.github/workflows/test.yml
    with:
      run_id: ${{ github.run_id }}
      ref: ${{ github.event.pull_request.head.ref }}
