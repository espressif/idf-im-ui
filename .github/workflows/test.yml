name: Autotest GUI

on:
    workflow_call:
        inputs:
            run_id:
                required: true
                type: string
            ref:
                required: true
                type: string

jobs:
    test:
        name: Automated test scripts
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: ubuntu-latest
                      package_name: linux-x64
                      run_on: GitHub
                    - os: windows-latest
                      package_name: windows-x64
                      run_on: GitHub

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ inputs.ref }}

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Download artifacts
              uses: actions/download-artifact@v4
              with:
                  path: ./artifacts

            - name: Install Tauri-Driver
              run: |
                  cargo install tauri-driver

            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

            - name: Get GUI application version number (non-Windows)
              if: runner.os != 'Windows'
              run: |
                  git fetch --tags
                  LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
                  GUI_TAG=${LATEST_TAG#v}
                  echo "GUI_TAG=$GUI_TAG" >> $GITHUB_ENV
                  echo "Latest GUI tag to validate: $GUI_TAG"

            - name: Fetch latest IDF release
              if: runner.os != 'Windows'
              run: |
                  curl -v -s https://dl.espressif.com/dl/esp-idf/idf_versions.json > IDF_latest_release.json
                  IDF_TAG=$(jq -r .VERSIONS[1].name IDF_latest_release.json)
                  echo "IDF_TAG=$IDF_TAG" >> $GITHUB_ENV
                  echo "Latest IDF for default install: $IDF_TAG"

            - name: Extract artifact (non-Windows)
              if: runner.os != 'Windows'
              run: |
                  mkdir -p test-bin
                  # cp artifacts/eim-linux-x86_64-${{ github.run_number }}/eim test-bin
                  unzip ./artifacts/eim-linux-x86_64-${{ github.run_number }}/eim.zip -d test-bin

            - name: Set executable permissions (non-Windows)
              if: runner.os != 'Windows'
              run: |
                  chmod +x ./test-bin/eim

            - name: Install dependencies (Ubuntu)
              if: runner.os == 'Linux'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y git cmake ninja-build wget flex bison gperf ccache libffi-dev libssl-dev dfu-util libusb-1.0-0-dev python3 python3-venv python3-pip webkit2gtk-driver xvfb

            - name: Start XVFB (Ubuntu)
              if: runner.os == 'Linux'
              run: |
                  sudo Xvfb :99 -ac -screen 0 1920x1080x24 &
                  echo "DISPLAY=:99" >> $GITHUB_ENV

            - name: Run IDF installation and post install test script (non-Windows)
              if: runner.os != 'Windows'
              run: |
                  export DEBUG="true"
                  export LOG_TO_FILE="true"
                  export EIM_GUI_PATH="../test-bin/eim"
                  export EIM_GUI_VERSION="${{ env.GUI_TAG }}"
                  export IDF_VERSION="${{ env.IDF_TAG }}"
                  cd tests
                  npm ci
                  npm run test --file=basic-test

            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

            - name: Get GUI application version number (Windows)
              if: runner.os == 'Windows'
              run: |
                  git fetch --tags
                  $LATEST_TAG = (git tag --sort=-creatordate | Select-Object -First 1)
                  $GUI_TAG = $LATEST_TAG -replace '^v', ''
                  echo "GUI_TAG=$GUI_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
                  echo "Latest GUI tag to validate: $GUI_TAG"

            - name: Fetch latest IDF release
              if: runner.os == 'Windows'
              run: |
                  $json = Invoke-RestMethod -Uri "https://dl.espressif.com/dl/esp-idf/idf_versions.json"
                  $IDF_TAG = $json.VERSIONS[1].name
                  echo "IDF_TAG=$IDF_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
                  echo "Latest IDF for default install: $IDF_TAG"

            - name: Extract artifact (non-Windows)
              if: runner.os != 'Windows'
              run: |
                  mkdir -p test-bin
                  unzip ./artifacts/eim-gui-${{ matrix.package_name }}-${{ inputs.run_id }}/eim.zip -d test-bin

            - name: Extract artifact (Windows)
              if: runner.os == 'Windows'
              run: |
                  mkdir -p test-bin
                  Copy-Item .\artifacts\eim-gui-${{ matrix.package_name }}-${{ inputs.run_id }}\eim.exe -Destination test-bin

            - name: Update WebView2 Runtime
              if: runner.os == 'Windows'
              run: |
                  Invoke-WebRequest -Uri 'https://go.microsoft.com/fwlink/p/?LinkId=2124703' -OutFile 'setup.exe'
                  Start-Process -FilePath setup.exe -Verb RunAs -Wait

            - name: Install dependencies (Windows)
              if: runner.os == 'windows'
              run: |
                  choco install ninja -y

            - name: Run IDF installation and post install test script (Windows)
              if: runner.os == 'Windows'
              run: |
                  $env:DEBUG="true"                  
                  $env:LOG_TO_FILE="true"
                  $env:EIM_GUI_PATH = "..\test-bin\eim.exe"
                  $env:EIM_GUI_VERSION = "${{ env.GUI_TAG }}"
                  $env:IDF_VERSION = "${{ env.IDF_TAG }}"                  
                  Set-Location -Path "./tests"
                  npm ci
                  npm run test-win --file=basic-test

            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results-${{ matrix.package_name }}.zip
                  path: |
                      ./tests/results-*.json
                      ./tests/*.png
                      ./tests/test.log

            - name: Upload EIM install log (non-windows)
              uses: actions/upload-artifact@v4
              if: runner.os != 'Windows'
              with:
                  name: install-log-${{ matrix.package_name }}.zip
                  path: |
                      ~/.local/share/eim/logs/**/*

            - name: Upload EIM install log (windows)
              uses: actions/upload-artifact@v4
              if: runner.os == 'Windows'
              with:
                  name: install-log-${{ matrix.package_name }}.zip
                  path: |
                      ~/AppData/Local/eim/logs/**/*

    publish-test-results:
        name: Automated Test Results
        needs: test
        runs-on: ubuntu-latest
        if: always()

        steps:
            - name: Publish Test Results
              uses: dorny/test-reporter@v1
              with:
                  artifact: /test-results-(.*)/
                  name: "Auto Tests $1"
                  path: "**/*.json"
                  reporter: mocha-json
                  fail-on-empty: "true"
