name: Autotest GUI

on:
  workflow_call:
    inputs:
      run_number:
        required: true
        type: string
      ref:
        required: true
        type: string

jobs:
  test-cli-in-gui:
    name: Test CLI in GUI Binary (${{ matrix.package_name }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            package_name: linux-x64
            run_on: GitHub
          - os: windows-latest
            package_name: windows-x64
            run_on: GitHub
          - os: macos-latest
            package_name: macos-aarch64
            run_on: GitHub

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      # Non-Windows steps

      - name: Get CLI application version number (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          STRIPPED_TAG=${LATEST_TAG#v}
          echo "CLI_TAG=$STRIPPED_TAG" >> $GITHUB_ENV

      - name: Fetch latest IDF release (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          curl -s https://dl.espressif.com/dl/esp-idf/idf_versions.json > IDF_latest_release.json
          IDF_TAG=$(jq -r .VERSIONS[1].name IDF_latest_release.json)
          echo "IDF_TAG=$IDF_TAG" >> $GITHUB_ENV
          echo "Latest IDF for default install: $IDF_TAG"

      # Ubuntu

      - name: Extract artifact (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p test-bin
          ls -la ./artifacts/
          ls -la ./artifacts/eim-gui-${{ matrix.package_name }}-${{ inputs.run_number }}/
          cp ./artifacts/eim-gui-${{ matrix.package_name }}-${{ inputs.run_number }}/eim test-bin
          chmod +x test-bin/eim

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y git cmake ninja-build wget flex bison gperf ccache libffi-dev libssl-dev dfu-util libusb-1.0-0-dev python3 python3-venv python3-pip webkit2gtk-driver

      - name: Run IDF basic install test script (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          export LOG_TO_FILE="true"
          export EIM_FILE_PATH="../test-bin/eim"
          export EIM_VERSION="eim ${{ env.CLI_TAG }}"
          export IDF_VERSION="${{ env.IDF_TAG }}"
          cd tests
          npm ci
          npm run test-CLI --file=CLI-GUI-basic
        continue-on-error: true

      # MacOS

      - name: Extract artifact (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p test-bin
          ls -la ./artifacts/
          ls -la ./artifacts/eim-gui-${{ matrix.package_name }}-${{ inputs.run_number }}/
          cp -r ./artifacts/eim-gui-${{ matrix.package_name }}-${{ inputs.run_number }}/eim.app test-bin
          chmod +x test-bin/eim.app/Contents/MacOS/eim

      - name: Install dependencies (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake ninja dfu-util

      - name: Run IDF basic install test script (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          export LOG_TO_FILE="true"
          export EIM_FILE_PATH="../test-bin/eim.app/Contents/MacOS/eim"
          export EIM_VERSION="eim ${{ env.CLI_TAG }}"
          export IDF_VERSION="${{ env.IDF_TAG }}"
          cd tests
          npm ci
          npm run test-CLI --file=CLI-GUI-basic
        continue-on-error: true

      # Windows steps

      - name: Get CLI application version number (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git fetch --tags
          $LATEST_TAG = (git tag --sort=-creatordate | Select-Object -First 1)
          $STRIPPED_TAG = $LATEST_TAG -replace '^v', ''
          echo "CLI_TAG=$STRIPPED_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Fetch latest IDF release (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $json = Invoke-RestMethod -Uri "https://dl.espressif.com/dl/esp-idf/idf_versions.json"
          $IDF_TAG = $json.VERSIONS[1].name
          echo "IDF_TAG=$IDF_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Latest IDF for default install: $IDF_TAG"

      - name: Extract artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p test-bin
          ls ./artifacts/
          ls ./artifacts/eim-gui-${{ matrix.package_name }}-${{ inputs.run_number }}/
          Copy-Item .\artifacts\eim-gui-${{ matrix.package_name }}-${{ inputs.run_number }}\eim.exe -Destination test-bin

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ninja -y

      - name: Run IDF basic install test script (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:LOG_TO_FILE="true"
          $env:EIM_FILE_PATH = "..\test-bin\eim.exe"
          $env:EIM_VERSION = "eim ${{ env.CLI_TAG }}"
          $env:IDF_VERSION = "${{ env.IDF_TAG }}"
          Set-Location -Path "./tests"
          Expand-Archive node_modules.zip
          npm run test-CLI-win --file=CLI-GUI-basic
        continue-on-error: true

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: autotest-cli-in-gui-results-${{ matrix.package_name }}-${{matrix.run_on}}.zip
          path: |
            ./tests/results-*.json
            ./tests/test-*.log

      # Publish test results
      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: CLI-in-GUI-Autotests-${{ matrix.package_name }}-${{matrix.run_on}}
          path: ./tests/results-*.json
          path-replace-backslashes: "false"
          reporter: mocha-json
          fail-on-empty: true

  test-gui:
    name: Test GUI (${{ matrix.package_name }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            package_name: linux-x64
            run_on: GitHub
          - os: windows-latest
            package_name: windows-x64
            run_on: GitHub

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Tauri-Driver
        run: |
          cargo install tauri-driver

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      # Non-Windows steps

      - name: Get GUI application version number (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          GUI_TAG=${LATEST_TAG#v}
          echo "GUI_TAG=$GUI_TAG" >> $GITHUB_ENV
          echo "Latest GUI tag to validate: $GUI_TAG"

      - name: Fetch latest IDF release (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          curl -s https://dl.espressif.com/dl/esp-idf/idf_versions.json > IDF_latest_release.json
          IDF_TAG=$(jq -r .VERSIONS[1].name IDF_latest_release.json)
          echo "IDF_TAG=$IDF_TAG" >> $GITHUB_ENV
          echo "Latest IDF for default install: $IDF_TAG"

      - name: Extract artifact (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p test-bin
          ls -la ./artifacts/
          ls -la ./artifacts/eim-gui-${{ matrix.package_name }}-${{ inputs.run_number }}/
          cp ./artifacts/eim-gui-${{ matrix.package_name }}-${{ inputs.run_number }}/eim test-bin
          chmod +x ./test-bin/eim

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y git cmake ninja-build wget flex bison gperf ccache libffi-dev libssl-dev dfu-util libusb-1.0-0-dev python3 python3-venv python3-pip webkit2gtk-driver xvfb

      - name: Start XVFB (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo Xvfb :99 -ac -screen 0 1920x1080x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Run IDF basic install test script using GUI (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          export LOG_TO_FILE="true"
          export EIM_GUI_PATH="../test-bin/eim"
          export EIM_GUI_VERSION="${{ env.GUI_TAG }}"
          export IDF_VERSION="${{ env.IDF_TAG }}"
          cd tests
          npm ci
          npm run test-GUI --file=GUI-basic
        continue-on-error: true

      - name: Run IDF extended install test script using GUI (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          export LOG_TO_FILE="true"
          export EIM_GUI_PATH="../test-bin/eim"
          export EIM_GUI_VERSION="${{ env.GUI_TAG }}"
          export IDF_VERSION="${{ env.IDF_TAG }}"
          cd tests
          npm run test-GUI --file=GUI-extended
        continue-on-error: true

      # Windows steps

      - name: Get GUI application version number (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git fetch --tags
          $LATEST_TAG = (git tag --sort=-creatordate | Select-Object -First 1)
          $GUI_TAG = $LATEST_TAG -replace '^v', ''
          echo "GUI_TAG=$GUI_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Latest GUI tag to validate: $GUI_TAG"

      - name: Fetch latest IDF release (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $json = Invoke-RestMethod -Uri "https://dl.espressif.com/dl/esp-idf/idf_versions.json"
          $IDF_TAG = $json.VERSIONS[1].name
          echo "IDF_TAG=$IDF_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Latest IDF for default install: $IDF_TAG"

      - name: Extract artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p test-bin
          ls ./artifacts/
          ls ./artifacts/eim-gui-${{ matrix.package_name }}-${{ inputs.run_number }}/
          Copy-Item .\artifacts\eim-gui-${{ matrix.package_name }}-${{ inputs.run_number }}\eim.exe -Destination test-bin

      - name: Update WebView2 Runtime
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri 'https://go.microsoft.com/fwlink/p/?LinkId=2124703' -OutFile 'setup.exe'
          Start-Process -FilePath setup.exe -Verb RunAs -Wait

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ninja -y

      - name: Run IDF basic install test script using GUI (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:LOG_TO_FILE="true"
          $env:EIM_GUI_PATH = "..\test-bin\eim.exe"
          $env:EIM_GUI_VERSION = "${{ env.GUI_TAG }}"
          $env:IDF_VERSION = "${{ env.IDF_TAG }}"
          Set-Location -Path "./tests"
          Expand-Archive node_modules.zip
          npm run test-GUI-win --file=GUI-basic
        continue-on-error: true

      - name: Run IDF extended install test script using GUI (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:LOG_TO_FILE="true"
          $env:EIM_GUI_PATH = "..\test-bin\eim.exe"
          $env:EIM_GUI_VERSION = "${{ env.GUI_TAG }}"
          $env:IDF_VERSION = "${{ env.IDF_TAG }}"
          Set-Location -Path "./tests"
          npm run test-GUI-win --file=GUI-extended
        continue-on-error: true

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: autotest-GUI-results-${{ matrix.package_name }}.zip
          path: |
            ./tests/results-*.json
            ./tests/*.png
            ./tests/test-*.log

      - name: Upload EIM install log (non-windows)
        uses: actions/upload-artifact@v4
        if: matrix.os != 'windows-latest'
        with:
          name: autotest-GUI-install-log-${{ matrix.package_name }}.zip
          path: |
            ~/.local/share/eim/logs/**/*

      - name: Upload EIM install log (windows)
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: autotest-GUI-install-log-${{ matrix.package_name }}.zip
          path: |
            ~/AppData/Local/eim/logs/**/*

      # Publish test results
      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: GUI-Autotests-${{ matrix.package_name }}-${{matrix.run_on}}
          path: ./tests/results-*.json
          path-replace-backslashes: "false"
          reporter: mocha-json
          fail-on-empty: true
