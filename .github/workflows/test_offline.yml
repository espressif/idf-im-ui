name: Autotest Offline

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      run_id:
        required: true
        type: string

  workflow_dispatch:
    inputs:
      run_id:
        description: "The run id from which to take the offline installer archive"
        required: true
        type: string

jobs:
  test-offline:
    name: Offline (${{ matrix.package_name }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            package_name: linux-x64
            run_on: GitHub
          - os: ubuntu-24.04-arm
            package_name: linux-aarch64
            run_on: GitHub
          - os: windows-latest
            package_name: windows-x64
            run_on: GitHub
          - os: macos-latest
            package_name: macos-aarch64
            run_on: GitHub
          - os: macos-13
            package_name: macos-x64
            run_on: GitHub

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Download Build Info files
        uses: actions/download-artifact@v5
        with:
          pattern: build-info-*-${{ matrix.package_name }}
          merge-multiple: true
          path: ./artifacts
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ inputs.run_id }}

      # Non-Windows steps

      - name: Download latest EIM CLI binary (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          latest_release=$(curl -s https://api.github.com/repos/espressif/idf-im-ui/releases/latest)
          eim_cli_url=$(echo "$latest_release" | jq -r '.assets[] | select(.name | test("eim-cli-${{matrix.package_name}}.zip")) | .browser_download_url')
          curl -L -o ./artifacts/eim-cli.zip "$eim_cli_url"

          ls -la ./artifacts/
          unzip ./artifacts/eim-cli.zip -d ./artifacts/
          chmod +x artifacts/eim

      - name: Install dependencies and node.js (Ubuntu)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm'
        run: |
          sudo apt-get update
          sudo apt-get install -y git wget flex bison gperf ccache libffi-dev libssl-dev dfu-util libusb-1.0-0-dev libgcrypt20 libglib2.0-0 libpixman-1-0 libsdl2-2.0-0 libslirp0 python3 python3-pip python3-venv
          python3 --version
          cd tests
          npm ci

      - name: Install dependencies and node.js (MacOS)
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
        run: |
          brew install dfu-util libgcrypt glib pixman sdl2 libslirp python3
          python3 --version
          cd tests
          npm ci

      - name: Run IDF offline installation (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          export LOG_TO_FILE="true"
          export EIM_CLI_PATH="../artifacts/eim"
          export BUILD_INFO_PATH="../artifacts"
          cd tests
          npm run test-offline
        continue-on-error: true

      # Windows steps

      - name: Download latest EIM CLI binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          latest_release=$(curl -s https://api.github.com/repos/espressif/idf-im-ui/releases/latest)
          eim_cli_url=$(echo "$latest_release" | jq -r '.assets[] | select(.name | test("eim-cli-${{matrix.package_name}}.exe")) | .browser_download_url')
          curl -L -o ./artifacts/eim-cli.exe "$eim_cli_url"

          ls ./artifacts/

      - name: Update Python (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Run IDF offline installation (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:LOG_TO_FILE="true"
          $env:EIM_CLI_PATH = "..\artifacts\eim.exe"
          $env:BUILD_INFO_PATH = "..\artifacts"
          Set-Location -Path "./tests"
          Expand-Archive node_modules.zip
          npm run test-offline
        continue-on-error: true

      # Copy eim log files to standard location for easier access
      - name: Copy EIM Log files (ubuntu)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm'
        run: |
          cp ~/.local/share/eim/logs/*.log ./tests/
        continue-on-error: true

      - name: Copy EIM Log files (MacOS)
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
        run: |
          cp ~/Library/Application\ Support/eim/logs/*.log ./tests/
        continue-on-error: true

      - name: Copy EIM Log files (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Move-Item -Path "$env:LOCALAPPDATA\eim\logs\*" -Destination ".\tests\" -Force
        continue-on-error: true

      # Upload test results
      - name: Upload test results (non-windows)
        uses: actions/upload-artifact@v4
        if: matrix.os != 'windows-latest'
        with:
          name: autotest-CLI-Offline-results-${{ matrix.package_name }}
          path: |
            ./tests/results-*.json
            ./tests/*.log

      - name: Upload test results (windows)
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: autotest-CLI-Offline-results-${{ matrix.package_name }}
          path: |
            ./tests/results-*.json
            ./tests/*.log

      # Publish test results
      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: CLI-Offline-Autotests-${{ matrix.package_name }}
          path: ./tests/results-*.json
          path-replace-backslashes: "false"
          reporter: mocha-json
          fail-on-empty: true
