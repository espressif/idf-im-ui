name: Unified Build Workflow

on:
  push:
    tags:
      - "v*"
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - created
  workflow_dispatch:

jobs:
  setup:
    name: Define Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set up build matrix
        id: set-matrix
        run: |
          echo "matrix={\"include\":[{\"os\":\"ubuntu-22.04\",\"package_name\":\"linux-x64\",\"target\":\"\",\"use_container\":true},{\"os\":\"ubuntu-22.04-arm\",\"package_name\":\"linux-aarch64\",\"target\":\"aarch64-unknown-linux-gnu\",\"use_container\":true},{\"os\":\"windows-latest\",\"package_name\":\"windows-x64\",\"target\":\"\",\"use_container\":false},{\"os\":\"macos-latest\",\"package_name\":\"macos-aarch64\",\"target\":\"aarch64-apple-darwin\",\"use_container\":false},{\"os\":\"macos-13\",\"package_name\":\"macos-x64\",\"target\":\"x86_64-apple-darwin\",\"use_container\":false}]}" >> $GITHUB_OUTPUT

  build-test-lib:
    name: Build and Test Library (${{ matrix.package_name }})
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" >> $env:GITHUB_ENV
          vcpkg install openssl:x64-windows-static-md

      - name: Install dependencies (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev patchelf

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build and Test Library
        if: runner.os != 'Windows'
        run: |
          cd src-tauri
          cargo test --no-fail-fast --no-default-features --lib ${{ matrix.target && format('--target {0}', matrix.target) || '' }} 2>&1 | tee lib-result.txt
        shell: bash
        continue-on-error: true

      - name: Format test results
        if: runner.os != 'Windows'
        uses: hahihula/rust-test-results-formatter@v1
        with:
          results-file: "./src-tauri/lib-result.txt"

  build-cli-linux:
    name: Build CLI (Linux - ${{ matrix.package_name }})
    needs: [setup, build-test-lib]
    if: (needs.build-test-lib.result == 'success' || needs.build-test-lib.result == 'skipped')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            package_name: linux-x64
            target: ""
          - os: ubuntu-24.04-arm
            package_name: linux-aarch64
            target: aarch64-unknown-linux-musl
    container:
      image: clux/muslrust:stable
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y libssl-dev patchelf zip

      - name: Build CLI
        run: |
          cd src-tauri
          cargo build --release --no-default-features --features cli ${{ matrix.target && format('--target {0}', matrix.target) || '' }}
        shell: bash

      - name: Create release directory
        run: mkdir -p release_cli/${{ matrix.package_name }}

      - name: Copy binary
        run: |
          cp src-tauri/target/${{ matrix.target || 'x86_64-unknown-linux-musl' }}/release/eim release_cli/${{ matrix.package_name }}/eim
          chmod +x release_cli/${{ matrix.package_name }}/eim
          cd release_cli/${{ matrix.package_name }}
          zip -r eim.zip eim
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eim-cli-${{ matrix.package_name }}-${{ github.run_number }}
          path: release_cli/${{ matrix.package_name }}/eim

      - name: Upload artifact for tag
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: eim-cli-${{ matrix.package_name }}-${{ github.ref_name }}
          path: release_cli/${{ matrix.package_name }}/eim

      - name: Upload Release Asset - Unix
        if: github.event_name == 'release' && github.event.action == 'created' && runner.os != 'Windows'
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: release_cli/${{ matrix.package_name }}/eim.zip
          asset_name: eim-cli-${{ matrix.package_name }}.zip

  build-cli:
    name: Build CLI (${{ matrix.package_name }})
    needs: [setup, build-test-lib]
    if: (needs.build-test-lib.result == 'success' || needs.build-test-lib.result == 'skipped')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            package_name: windows-x64
            target: ""
          - os: macos-latest
            package_name: macos-aarch64
            target: aarch64-apple-darwin
          - os: macos-13
            package_name: macos-x64
            target: x86_64-apple-darwin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set up Perl (Windows)
        if: runner.os == 'Windows'
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: "5.38"

      - name: Install Perl dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cpan App::cpanminus
          cpanm --force Locale::Maketext::Simple
          cpanm --force Text::Template
          cpanm --force Params::Check
          cpanm --force IPC::Cmd
          perl -MLocale::Maketext::Simple -e "print 'Locale::Maketext::Simple loaded successfully\n'"
          perl -MText::Template -e "print 'Text::Template loaded successfully\n'"
          perl -MParams::Check -e "print 'Params::Check loaded successfully\n'"
          perl -MIPC::Cmd -e "print 'IPC::Cmd loaded successfully\n'"
          $perl_lib_path = "C:\hostedtoolcache\windows\perl\5.38.4-thr\x64\site\lib"
          echo "PERL5LIB=$perl_lib_path" >> $env:GITHUB_ENV

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build CLI
        if: runner.os == 'Windows'
        env:
          OPENSSL_DIR: 'C:\vcpkg\installed\x64-windows-static-md'
          OPENSSL_LIB_DIR: 'C:\vcpkg\installed\x64-windows-static-md\lib'
          OPENSSL_INCLUDE_DIR: 'C:\vcpkg\installed\x64-windows-static-md\include'
          OPENSSL_STATIC: "1"
          PERL: 'C:\\hostedtoolcache\\windows\\perl\\5.38.4-thr\\x64\\bin\\perl.exe'
        run: |
          cd src-tauri
          cargo build --release --no-default-features --features cli ${{ matrix.target && format('--target {0}', matrix.target) || '' }}
        shell: bash

      - name: Build CLI
        if: startsWith(matrix.os, 'macos')
        run: |
          cd src-tauri
          cargo build --release --no-default-features --features cli ${{ matrix.target && format('--target {0}', matrix.target) || '' }}
        shell: bash

      - name: Create release directory
        run: mkdir -p release_cli/${{ matrix.package_name }}

      - name: Copy binary (Windows)
        if: runner.os == 'Windows'
        run: copy src-tauri\target\release\eim.exe release_cli\${{ matrix.package_name }}\eim.exe
        shell: cmd

      - name: Copy binary (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          cp src-tauri/target/${{ matrix.target }}/release/eim release_cli/${{ matrix.package_name }}/eim
          chmod +x release_cli/${{ matrix.package_name }}/eim
          cd release_cli/${{ matrix.package_name }}
          zip -r eim.zip eim
        shell: bash

      - name: Sign Windows Binary
        if: runner.os == 'Windows'
        env:
          WINDOWS_PFX_FILE: ${{ secrets.WIN_CERTIFICATE }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.WIN_CERTIFICATE_PWD }}
        run: |
          echo $env:WINDOWS_PFX_FILE | Out-File -FilePath cert.b64 -Encoding ASCII
          certutil -decode cert.b64 cert.pfx
          Remove-Item cert.b64
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool.exe" sign /f cert.pfx /p $env:WINDOWS_PFX_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 release_cli/${{ matrix.package_name }}/eim.exe

      - name: Codesign macOS Binary
        if: startsWith(matrix.os, 'macos')
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p espressif build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p espressif build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k espressif build.keychain
          codesign --entitlements eim.entitlement --options runtime --force -s "ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD. (QWXF6GB4AV)" release_cli/${{ matrix.package_name }}/eim -v
          codesign -v -vvv --deep release_cli/${{ matrix.package_name }}/eim

      - name: Notarize macOS Binary
        if: startsWith(matrix.os, 'macos')
        env:
          NOTARIZATION_USERNAME: ${{ secrets.NOTARIZATION_USERNAME }}
          NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
          NOTARIZATION_TEAM_ID: ${{ secrets.NOTARIZATION_TEAM_ID }}
        run: |
          cd release_cli/${{ matrix.package_name }}
          zip -r eim.zip eim
          security create-keychain -p espressif notary.keychain
          security default-keychain -s notary.keychain
          security unlock-keychain -p espressif notary.keychain
          xcrun notarytool store-credentials "eim-notarytool-profile" --apple-id $NOTARIZATION_USERNAME --team-id $NOTARIZATION_TEAM_ID --password $NOTARIZATION_PASSWORD
          xcrun notarytool submit eim.zip --keychain-profile "eim-notarytool-profile" --wait
          unzip -o eim.zip -d .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eim-cli-${{ matrix.package_name }}-${{ github.run_number }}
          path: release_cli/${{ matrix.package_name }}/eim${{ runner.os == 'Windows' && '.exe' || '' }}

      - name: Upload artifact for tag
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: eim-cli-${{ matrix.package_name }}-${{ github.ref_name }}
          path: release_cli/${{ matrix.package_name }}/eim${{ runner.os == 'Windows' && 'exe' || '' }}

      - name: Upload Release Asset - MacOs
        if: github.event_name == 'release' && github.event.action == 'created' && runner.os != 'Windows'
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: release_cli/${{ matrix.package_name }}/eim.zip
          asset_name: eim-cli-${{ matrix.package_name }}.zip

      - name: Upload Release Asset (Windows)
        if: github.event_name == 'release' && github.event.action == 'created' && runner.os == 'Windows'
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: release_cli/${{ matrix.package_name }}/eim.exe
          asset_name: eim-cli-${{ matrix.package_name }}.exe

  build-gui:
    name: Build GUI (${{ matrix.package_name }})
    needs: [setup, build-test-lib]
    if: needs.build-test-lib.result == 'success' || needs.build-test-lib.result == 'skipped'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" >> $env:GITHUB_ENV
          vcpkg install openssl:x64-windows-static-md

      - name: Install dependencies (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev libssl-dev patchelf

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install frontend dependencies
        run: yarn install

      - name: Import macOS codesign certs
        if: startsWith(matrix.os, 'macos')
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          keychain: build

      - name: Build GUI (macOS)
        if: startsWith(matrix.os, 'macos')
        env:
          APPLE_ID: ${{ secrets.NOTARIZATION_USERNAME }}
          APPLE_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.NOTARIZATION_TEAM_ID }}
        run: |
          security create-keychain -p espressif notary.keychain
          security default-keychain -s notary.keychain
          security unlock-keychain -p espressif notary.keychain
          yarn tauri build

      - name: Build GUI (non-macOS)
        if: ${{ !startsWith(matrix.os, 'macos') }}
        run: yarn tauri build

      - name: Sign Windows Binary
        if: runner.os == 'Windows'
        env:
          WINDOWS_PFX_FILE: ${{ secrets.WIN_CERTIFICATE }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.WIN_CERTIFICATE_PWD }}
        run: |
          echo $env:WINDOWS_PFX_FILE | Out-File -FilePath cert.b64 -Encoding ASCII
          certutil -decode cert.b64 cert.pfx
          Remove-Item cert.b64
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool.exe" sign /f cert.pfx /p $env:WINDOWS_PFX_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 .\src-tauri\target\release\eim.exe

      - name: Handle Linux artifacts
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          chmod +x src-tauri/target/release/eim
          chmod +x src-tauri/target/release/bundle/appimage/*.AppImage
          cd src-tauri/target/release/
          zip -r eim.zip eim

      - name: Handle macOS artifacts
        if: startsWith(matrix.os, 'macos')
        run: |
          chmod +x src-tauri/target/release/bundle/macos/eim.app
          cd src-tauri/target/release/bundle/macos
          zip -r eim.zip eim.app

      - name: Upload Linux artifacts
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v4
        with:
          name: eim-gui-${{ matrix.package_name }}-${{ github.run_number }}
          path: |
            src-tauri/target/release/eim
            # src-tauri/target/release/bundle/deb/*.deb
            # src-tauri/target/release/bundle/rpm/*.rpm
            # src-tauri/target/release/bundle/appimage/*.AppImage
          if-no-files-found: error

      - name: Upload macOS artifacts
        if: startsWith(matrix.os, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: eim-gui-${{ matrix.package_name }}-${{ github.run_number }}
          path: |
            # src-tauri/target/release/bundle/macos/eim.app
            # src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.app
          if-no-files-found: error

      - name: Upload Windows artifacts
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: eim-gui-${{ matrix.package_name }}-${{ github.run_number }}
          path: |
            src-tauri/target/release/eim.exe
            # src-tauri/target/release/bundle/msi/*.msi
          if-no-files-found: error

      - name: Upload Release Assets (Windows)
        if: github.event_name == 'release' && github.event.action == 'created' && runner.os == 'Windows'
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: src-tauri/target/release/eim.exe
          asset_name: eim-gui-${{ matrix.package_name }}.exe

      - name: Upload Release Assets (Linux)
        if: github.event_name == 'release' && github.event.action == 'created' && startsWith(matrix.os, 'ubuntu')
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: src-tauri/target/release/eim.zip
          asset_name: eim-gui-${{ matrix.package_name }}.zip

      - name: Upload Release Assets (macOS)
        if: github.event_name == 'release' && github.event.action == 'created' && startsWith(matrix.os, 'macos')
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: src-tauri/target/release/bundle/macos/eim.zip
          asset_name: eim-gui-${{ matrix.package_name }}.zip

  test-cli:
    name: Test CLI Binary (${{ matrix.package_name }})-(${{ matrix.run_on }})
    needs: [build-cli, build-cli-linux]
    # Only run tests if cli was built and either cli changed or it's a release
    if: needs.build-cli.result == 'success'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            package_name: linux-x64
            run_on: GitHub
          - os: windows-latest
            package_name: windows-x64
            run_on: GitHub
          - os: macos-latest
            package_name: macos-aarch64
            run_on: GitHub
          - os: self-hosted
            package_name: linux-x64
            run_on: CNRunner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      # Non-Windows steps

      - name: Get CLI application version number (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          STRIPPED_TAG=${LATEST_TAG#v}
          echo "CLI_TAG=$STRIPPED_TAG" >> $GITHUB_ENV

      - name: Fetch latest IDF release (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          curl -s https://dl.espressif.com/dl/esp-idf/idf_versions.json > IDF_latest_release.json
          IDF_TAG=$(jq -r .VERSIONS[1].name IDF_latest_release.json)
          echo "IDF_TAG=$IDF_TAG" >> $GITHUB_ENV
          echo "Latest IDF for default install: $IDF_TAG"

      - name: Extract artifact (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p test-bin
          ls -la ./artifacts/
          ls -la ./artifacts/eim-cli-${{ matrix.package_name }}-${{ github.run_number }}/
          cp ./artifacts/eim-cli-${{ matrix.package_name }}-${{ github.run_number }}/eim test-bin
          chmod +x test-bin/eim

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y git cmake ninja-build wget flex bison gperf ccache libffi-dev libssl-dev dfu-util libusb-1.0-0-dev python3 python3-venv python3-pip

      - name: Install dependencies (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake ninja dfu-util

      - name: Run IDF basic install test script (non-Windows)
        if: matrix.os != 'windows-latest' && matrix.run_on != 'CNRunner'
        run: |
          export LOG_TO_FILE="true"
          export EIM_FILE_PATH="../test-bin/eim"
          export EIM_VERSION="eim ${{ env.CLI_TAG }}"
          export IDF_VERSION="${{ env.IDF_TAG }}"
          cd tests
          npm ci
          npm run test-CLI --file=CLI-basic
        continue-on-error: true

      - name: Run IDF extended install test script (non-Windows)
        if: matrix.os != 'windows-latest' && matrix.run_on != 'CNRunner'
        run: |
          export LOG_TO_FILE="true"
          export EIM_FILE_PATH="../test-bin/eim"
          export EIM_VERSION="eim ${{ env.CLI_TAG }}"
          export IDF_VERSION="${{ env.IDF_TAG }}"
          cd tests
          npm run test-CLI --file=CLI-extended
        continue-on-error: true

      - name: Run alternative mirrors test script (CNRunner)
        if: matrix.run_on == 'CNRunner'
        run: |
          export LOG_TO_FILE="true"
          export EIM_FILE_PATH="../test-bin/eim"
          export EIM_VERSION="eim ${{ env.CLI_TAG }}"
          export IDF_VERSION="${{ env.IDF_TAG }}"
          cd tests
          npm ci
          npm run test-CLI --file=CLI-mirrors
        continue-on-error: true

      # Windows steps

      - name: Get CLI application version number (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git fetch --tags
          $LATEST_TAG = (git tag --sort=-creatordate | Select-Object -First 1)
          $STRIPPED_TAG = $LATEST_TAG -replace '^v', ''
          echo "CLI_TAG=$STRIPPED_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Fetch latest IDF release (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $json = Invoke-RestMethod -Uri "https://dl.espressif.com/dl/esp-idf/idf_versions.json"
          $IDF_TAG = $json.VERSIONS[1].name
          echo "IDF_TAG=$IDF_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Latest IDF for default install: $IDF_TAG"

      - name: Extract artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p test-bin
          ls ./artifacts/
          ls ./artifacts/eim-cli-${{ matrix.package_name }}-${{ github.run_number }}/
          Copy-Item .\artifacts\eim-cli-${{ matrix.package_name }}-${{ github.run_number }}\eim.exe -Destination test-bin

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ninja -y

      - name: Run IDF basic install test script (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:LOG_TO_FILE="true"
          $env:EIM_FILE_PATH = "..\test-bin\eim.exe"
          $env:EIM_VERSION = "eim ${{ env.CLI_TAG }}"
          $env:IDF_VERSION = "${{ env.IDF_TAG }}"
          Set-Location -Path "./tests"
          Expand-Archive node_modules.zip
          npm run test-CLI-win --file=CLI-basic
        continue-on-error: true

      - name: Run IDF extended install test script (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:LOG_TO_FILE="true"
          $env:EIM_FILE_PATH = "..\test-bin\eim.exe"
          $env:EIM_VERSION = "eim ${{ env.CLI_TAG }}"
          $env:IDF_VERSION = "${{ env.IDF_TAG }}"
          Set-Location -Path "./tests"
          npm run test-CLI-win --file=CLI-extended
        continue-on-error: true

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: autotest-CLI-results-${{ matrix.package_name }}-${{matrix.run_on}}.zip
          path: |
            ./tests/results-*.json
            ./tests/test-*.log

  test-cli-in-gui:
    name: Test CLI in GUI Binary (${{ matrix.package_name }})
    needs: [build-gui]
    if: needs.build-gui.result == 'success'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            package_name: linux-x64
            run_on: GitHub
          - os: windows-latest
            package_name: windows-x64
            run_on: GitHub
          - os: macos-latest
            package_name: macos-aarch64
            run_on: GitHub

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      # Non-Windows steps

      - name: Get CLI application version number (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          STRIPPED_TAG=${LATEST_TAG#v}
          echo "CLI_TAG=$STRIPPED_TAG" >> $GITHUB_ENV

      - name: Fetch latest IDF release (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          curl -s https://dl.espressif.com/dl/esp-idf/idf_versions.json > IDF_latest_release.json
          IDF_TAG=$(jq -r .VERSIONS[1].name IDF_latest_release.json)
          echo "IDF_TAG=$IDF_TAG" >> $GITHUB_ENV
          echo "Latest IDF for default install: $IDF_TAG"

      # Ubuntu

      - name: Extract artifact (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p test-bin
          ls -la ./artifacts/
          ls -la ./artifacts/eim-gui-${{ matrix.package_name }}-${{ github.run_number }}/
          cp ./artifacts/eim-gui-${{ matrix.package_name }}-${{ github.run_number }}/eim test-bin
          chmod +x test-bin/eim

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y git cmake ninja-build wget flex bison gperf ccache libffi-dev libssl-dev dfu-util libusb-1.0-0-dev python3 python3-venv python3-pip webkit2gtk-driver

      - name: Run IDF basic install test script (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          export LOG_TO_FILE="true"
          export EIM_FILE_PATH="../test-bin/eim"
          export EIM_VERSION="eim ${{ env.CLI_TAG }}"
          export IDF_VERSION="${{ env.IDF_TAG }}"
          cd tests
          npm ci
          npm run test-CLI --file=CLI-GUI-basic
        continue-on-error: true

      # MacOS

      - name: Extract artifact (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p test-bin
          ls -la ./artifacts/
          ls -la ./artifacts/eim-gui-${{ matrix.package_name }}-${{ github.run_number }}/
          cp -r ./artifacts/eim-gui-${{ matrix.package_name }}-${{ github.run_number }}/eim.app test-bin
          chmod +x test-bin/eim.app/Contents/MacOS/eim

      - name: Install dependencies (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake ninja dfu-util

      - name: Run IDF basic install test script (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          export LOG_TO_FILE="true"
          export EIM_FILE_PATH="../test-bin/eim.app/Contents/MacOS/eim"
          export EIM_VERSION="eim ${{ env.CLI_TAG }}"
          export IDF_VERSION="${{ env.IDF_TAG }}"
          cd tests
          npm ci
          npm run test-CLI --file=CLI-GUI-basic
        continue-on-error: true

      # Windows steps

      - name: Get CLI application version number (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git fetch --tags
          $LATEST_TAG = (git tag --sort=-creatordate | Select-Object -First 1)
          $STRIPPED_TAG = $LATEST_TAG -replace '^v', ''
          echo "CLI_TAG=$STRIPPED_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Fetch latest IDF release (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $json = Invoke-RestMethod -Uri "https://dl.espressif.com/dl/esp-idf/idf_versions.json"
          $IDF_TAG = $json.VERSIONS[1].name
          echo "IDF_TAG=$IDF_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Latest IDF for default install: $IDF_TAG"

      - name: Extract artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p test-bin
          ls ./artifacts/
          ls ./artifacts/eim-gui-${{ matrix.package_name }}-${{ github.run_number }}/
          Copy-Item .\artifacts\eim-gui-${{ matrix.package_name }}-${{ github.run_number }}\eim.exe -Destination test-bin

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ninja -y

      - name: Run IDF basic install test script (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:LOG_TO_FILE="true"
          $env:EIM_FILE_PATH = "..\test-bin\eim.exe"
          $env:EIM_VERSION = "eim ${{ env.CLI_TAG }}"
          $env:IDF_VERSION = "${{ env.IDF_TAG }}"
          Set-Location -Path "./tests"
          Expand-Archive node_modules.zip
          npm run test-CLI-win --file=CLI-GUI-basic
        continue-on-error: true

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: autotest-cli-in-gui-results-${{ matrix.package_name }}-${{matrix.run_on}}.zip
          path: |
            ./tests/results-*.json
            ./tests/test-*.log

  test-gui:
    name: Test GUI (${{ matrix.package_name }})
    needs: [build-gui]
    if: needs.build-gui.result == 'success'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            package_name: linux-x64
            run_on: GitHub
          - os: windows-latest
            package_name: windows-x64
            run_on: GitHub

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Tauri-Driver
        run: |
          cargo install tauri-driver

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      # Non-Windows steps

      - name: Get GUI application version number (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          GUI_TAG=${LATEST_TAG#v}
          echo "GUI_TAG=$GUI_TAG" >> $GITHUB_ENV
          echo "Latest GUI tag to validate: $GUI_TAG"

      - name: Fetch latest IDF release (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          curl -s https://dl.espressif.com/dl/esp-idf/idf_versions.json > IDF_latest_release.json
          IDF_TAG=$(jq -r .VERSIONS[1].name IDF_latest_release.json)
          echo "IDF_TAG=$IDF_TAG" >> $GITHUB_ENV
          echo "Latest IDF for default install: $IDF_TAG"

      - name: Extract artifact (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p test-bin
          ls -la ./artifacts/
          ls -la ./artifacts/eim-gui-${{ matrix.package_name }}-${{ github.run_number }}/
          cp ./artifacts/eim-gui-${{ matrix.package_name }}-${{ github.run_number }}/eim test-bin
          chmod +x ./test-bin/eim

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y git cmake ninja-build wget flex bison gperf ccache libffi-dev libssl-dev dfu-util libusb-1.0-0-dev python3 python3-venv python3-pip webkit2gtk-driver xvfb

      - name: Start XVFB (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo Xvfb :99 -ac -screen 0 1920x1080x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Run IDF basic install test script using GUI (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          export LOG_TO_FILE="true"
          export EIM_GUI_PATH="../test-bin/eim"
          export EIM_GUI_VERSION="${{ env.GUI_TAG }}"
          export IDF_VERSION="${{ env.IDF_TAG }}"
          cd tests
          npm ci
          npm run test-GUI --file=GUI-basic
        continue-on-error: true

      - name: Run IDF extended install test script using GUI (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          export LOG_TO_FILE="true"
          export EIM_GUI_PATH="../test-bin/eim"
          export EIM_GUI_VERSION="${{ env.GUI_TAG }}"
          export IDF_VERSION="${{ env.IDF_TAG }}"
          cd tests
          npm run test-GUI --file=GUI-extended
        continue-on-error: true

      # Windows steps

      - name: Get GUI application version number (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git fetch --tags
          $LATEST_TAG = (git tag --sort=-creatordate | Select-Object -First 1)
          $GUI_TAG = $LATEST_TAG -replace '^v', ''
          echo "GUI_TAG=$GUI_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Latest GUI tag to validate: $GUI_TAG"

      - name: Fetch latest IDF release (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $json = Invoke-RestMethod -Uri "https://dl.espressif.com/dl/esp-idf/idf_versions.json"
          $IDF_TAG = $json.VERSIONS[1].name
          echo "IDF_TAG=$IDF_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Latest IDF for default install: $IDF_TAG"

      - name: Extract artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p test-bin
          ls ./artifacts/
          ls ./artifacts/eim-gui-${{ matrix.package_name }}-${{ github.run_number }}/
          Copy-Item .\artifacts\eim-gui-${{ matrix.package_name }}-${{ github.run_number }}\eim.exe -Destination test-bin

      - name: Update WebView2 Runtime
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri 'https://go.microsoft.com/fwlink/p/?LinkId=2124703' -OutFile 'setup.exe'
          Start-Process -FilePath setup.exe -Verb RunAs -Wait

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ninja -y

      - name: Run IDF basic install test script using GUI (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:LOG_TO_FILE="true"
          $env:EIM_GUI_PATH = "..\test-bin\eim.exe"
          $env:EIM_GUI_VERSION = "${{ env.GUI_TAG }}"
          $env:IDF_VERSION = "${{ env.IDF_TAG }}"
          Set-Location -Path "./tests"
          Expand-Archive node_modules.zip
          npm run test-GUI-win --file=GUI-basic
        continue-on-error: true

      - name: Run IDF extended install test script using GUI (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:LOG_TO_FILE="true"
          $env:EIM_GUI_PATH = "..\test-bin\eim.exe"
          $env:EIM_GUI_VERSION = "${{ env.GUI_TAG }}"
          $env:IDF_VERSION = "${{ env.IDF_TAG }}"
          Set-Location -Path "./tests"
          npm run test-GUI-win --file=GUI-extended
        continue-on-error: true

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: autotest-GUI-results-${{ matrix.package_name }}.zip
          path: |
            ./tests/results-*.json
            ./tests/*.png
            ./tests/test-*.log

      - name: Upload EIM install log (non-windows)
        uses: actions/upload-artifact@v4
        if: matrix.os != 'windows-latest'
        with:
          name: autotest-GUI-install-log-${{ matrix.package_name }}.zip
          path: |
            ~/.local/share/eim/logs/**/*

      - name: Upload EIM install log (windows)
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: autotest-GUI-install-log-${{ matrix.package_name }}.zip
          path: |
            ~/AppData/Local/eim/logs/**/*

  publish-cli-test-results:
    name: CLI Test Results
    needs: test-cli
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        with:
          artifact: /autotest-CLI-results-(.*)/
          name: "CLI Tests $1"
          path: "*.json"
          reporter: mocha-json
          fail-on-empty: "true"

  publish-gui-cli-test-results:
    name: CLI in GUI Test Results
    needs: test-cli-in-gui
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        with:
          artifact: /autotest-cli-in-gui-results-(.*)/
          name: "CLI in GUI Tests $1"
          path: "*.json"
          reporter: mocha-json
          fail-on-empty: "true"

  publish-gui-test-results:
    name: GUI Test Results
    needs: [test-gui]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        with:
          artifact: /autotest-GUI-results-(.*)/
          name: "GUI Tests $1"
          path: "**/*.json"
          reporter: mocha-json
          fail-on-empty: "true"

  update-release-info:
    name: Update Release Information
    needs: [build-cli, build-cli-linux, build-gui]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Fetch latest release info
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-east-1
        run: |
          # GUI release info
          curl -s https://api.github.com/repos/espressif/idf-im-ui/releases/latest > eim_unified_release.json
          echo "Latest GUI release tag: $(jq -r .tag_name eim_unified_release.json)"
          aws s3 cp --acl=public-read "eim_unified_release.json" s3://espdldata/dl/eim/eim_unified_release.json
